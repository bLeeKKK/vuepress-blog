(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{459:function(a,t,r){"use strict";r.r(t);var v=r(56),_=Object(v.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"第一课"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第一课"}},[a._v("#")]),a._v(" 第一课")]),a._v(" "),r("ol",[r("li",[r("h2",{attrs:{id:"常数操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常数操作"}},[a._v("#")]),a._v(" 常数操作")]),a._v(" "),r("p",[a._v("和数据量无关的操作，就叫做【常数操作】\n例：加 减 乘 除\n和数据量有关的就不是，【常数操作】")])]),a._v(" "),r("li",[r("h2",{attrs:{id:"时间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[a._v("#")]),a._v(" 时间复杂度")]),a._v(" "),r("p",[a._v("常数操作的数量的表达式写出来，不要低阶项，而且忽略掉高阶项系数，所剩下的东西")]),a._v(" "),r("p",[a._v("例：aN² + bN + c 则 O(N²)是该算法的【时间复杂度】\n当时间复杂度一样的时候，就可以大致判断下【常数项时间】，最后 实际运行案例来判断")]),a._v(" "),r("p",[a._v("注：时间复杂度在估计时，按照可能遇到的最差情况来估计。如：插入排序法")])]),a._v(" "),r("li",[r("h2",{attrs:{id:"额外空间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#额外空间复杂度"}},[a._v("#")]),a._v(" 额外空间复杂度")]),a._v(" "),r("p",[a._v("如果需要新开辟有限几个变量的时候是 O(1)的空间复杂度。\n如果需要额外开辟一个数组，并且额外数组和原来的数组是等规模的那么就是 O(N)的空间复杂度。")])]),a._v(" "),r("li",[r("h2",{attrs:{id:"选择排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[a._v("#")]),a._v(" 选择排序")]),a._v(" "),r("p",[a._v("“选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果一个元素比当前元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。”")])]),a._v(" "),r("li",[r("h2",{attrs:{id:"冒泡排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[a._v("#")]),a._v(" 冒泡排序")]),a._v(" "),r("p",[a._v("“冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较,交换也发生在这两个元素之间。所以,如果两个元素相等,是不会再交换的;如果两个相等的元素没有相邻,那么即使通过前面的两两交换把两个相邻起来,这时候也不会交换,所以相同元素的前后顺序并没有改变,所以冒泡排序是一种稳定排序算法。”")])]),a._v(" "),r("li",[r("h2",{attrs:{id:"亦或运算"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#亦或运算"}},[a._v("#")]),a._v(" 亦或运算")]),a._v(" "),r("p",[a._v("1^0 = 1"),r("br"),a._v("\n1^1 = 0"),r("br"),a._v("\n满足结合律好交换律"),r("br"),a._v("\n例：可以不使用中间值进行两个 数字（number）交换\na = x, b = y\na = a^b\nb = a^b\na = a^b\n注：该案例使用时注意数据类型和存储的位置")])]),a._v(" "),r("li",[r("h2",{attrs:{id:"插入排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[a._v("#")]),a._v(" 插入排序")]),a._v(" "),r("p",[a._v("“所谓插入排序法，就是检查第i个数字，如果在它的左边的数字比它大，进行交换，这个动作一直继续下去，直到这个数字的左边数字比它还要小，就可以停止了。插入排序法主要的回圈有两个变数：i和j，每一次执行这个回圈，就会将第i个数字放到左边恰当的位置去。”")])]),a._v(" "),r("li",[r("h2",{attrs:{id:"二分法的详解和扩展"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二分法的详解和扩展"}},[a._v("#")]),a._v(" 二分法的详解和扩展")]),a._v(" "),r("ol",[r("li",[a._v("在有序的数组中有N个数，找出一个数是不是在其中。时间复杂度是：O(log(2)(N))")])])]),a._v(" "),r("li",[r("h2",{attrs:{id:"对数器的概念和使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对数器的概念和使用"}},[a._v("#")]),a._v(" 对数器的概念和使用")]),a._v(" "),r("ol",[r("li",[a._v("有一个你想要测的方法a")]),a._v(" "),r("li",[a._v("实现复杂度不好但是容易实现的方法b")]),a._v(" "),r("li",[a._v("实现一个随机样本产生器")]),a._v(" "),r("li",[a._v("把方法a和方法b跑相同的随机样本，看看得到的结果是否一样。")]),a._v(" "),r("li",[a._v("如果有一个随机样本使得比对结果不一致，打印样本进行人工干预，改对方法a或者方法b")]),a._v(" "),r("li",[a._v("当样本数量很多时比对测试依然正确，可以确定方法a己经正确。")])])])])])}),[],!1,null,null,null);t.default=_.exports}}]);